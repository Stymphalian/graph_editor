I want to create a web-based graph editor application.
"graphs" being the computer science version of nodes and edges.

Some of the functionality I want is:
1. In the center of the screen should be the viewport/viewer which displays all the nodes and edges.
Nodes are circles with the label/name of the nodes (can be either 0-indexed, or 1-indexed, or a custom string). 
edges are line segments between the circles.
Use SVG or an vector-based graphics library. D3 is reasonable too.

2. Here some interactions I want to provide when interacting with the viewer.
There should be three modes. Edit,Delete, View/Force mode. Provide buttons for switching between both.
Edit Mode:
  - Left clicking on an empty part of the screen should add a new node.
  - Left clicking a node should "select" it. left clicking it again should deselect it.
  - Every node should have a little "nib/bump". Left clicking on this nib will allow you to add an
    edge. When you mouse over another node and you let-go it should add the edge between those two nodes and add it to the graph.
  - double left-clicking on a node should allow you to change its label/name
  - double left-clicking on an edge should allow you to edit it's weight/label
  - left-click and dragging on a node should allow you to move it around.
Delete mode.
  - left-click and dragging on a node should allow you to move it around.
  - left-clicking on a node should delete that node and all of it's connected edges
  - left clicking on an edge should delete that edge.
View/Force mode:
  - it should run a simulation and try to organize the nodes. Use a force simluation to try to 
  nodes and edges together but with some spacing.
  - click-and-drag on nodes to move them around.
  - If you know d3-force, something similar to that. Feel free to use libraries
   for the implementation.

3. I should support both directed and undirected graphs. Undirected edges should just be normal 
line segments between nodes. Directed edges should have arrows between them.
Provide a toggle button to switch between these two modes.

4. There exists a left panel which provides text box which has all the data of the graph in the following format.
It should sync up with any changes/edits to the main viewer.
Also any edits to this graph format should also modify/sync up with the main viewer view.
```Graph Data Format
Node Count: 
6        <--- this is the number of nodes
Graph Data:
0        <-- there are the node labels (default just index number)
1
2
3
4
5
0 2      <-- this is an edge connecting nodes 0 and 2
0 4
0 5 123  <-- this is an edge with a weight value
1 4
1 5
2 3
2 4
4 5
```

7. Make an abstraction layer which holds the data of the underyling graph.
The text data in the text-box should be ground-truth of the graph data. 
but try to keep things abstracted and have the text-box and viewer be "views"
into the underlying graph data.

Tech Stack:
React,typescript,html,tailwind,d3 or other svg based graphics
any library you need to run the force-mode simulation (i.e d3-force)


The text panel should be simple text-areas with line numbers. Something like this.
Also it should be on the left of the graph viewer and thinner taking up less horizontal space (1/3)
6        <--- this is the number of nodes
0        <-- there are the node labels (default just index number)
1
2
3
4
5
0 2      <-- this is an edge connecting nodes 0 and 2
0 4
0 5 123  <-- this is an edge with a weight value
1 4
1 5
2 3
2 4
4 5


start the next sub-task.
One improvement I want with node dragging/movement. The entire connected graph
should follow the moving/dragging node more closely.

For edge creation I'd like an update to the behavior and interface.
Nodes should not have the node-nibs visible by default. 
Only when a node is selected should the node-nib be visible.
The user can then click the node nib to go into an edge creation mode and add edges
between nodes.
If the user select's empty space it should cancel the edge creation.
If the user selects a node and create the new edge, we should continue edge creation
from the newly selected node.


Next I want to finish off task 4 (the text-panel)
Here is the functionality of the text-panel.
It should be synchronized to the Graph model. Any edits to the text representation
should affect what is shown in the graph viewer. Any edits made in the graph viewer
should also have updates to the text representation. this should be done through the common
Graph model that is held in App.tsx

Here is the text-representation format of the graph. 
(It is essentially an edge list)
Here is an example:
```
1            // lines with a single label denote nodes in the graph
2
4
2 3          // lines with two elements separated by whitespace is an edge (from, to)
1 2 100      // lines with 3 elements is an edge with the given weight (from, to, weight)
4 3
3            // this node is defined after the edges, but should still be valid
```

The user may be able to directly edit the text and have it update the graph.
Any invalid lines should be ignored:
   - Duplicate labels
   - duplicate edges
   - lines with too many parts (i.e >3 after splitting on whitespace)

For the visual layout of the Text Panel on the UI
I want two text-areas. One to show the node count and the other
to show the text-representatin of the graph with line-numbers (1-indexed)


Ask me any clarifying questions on the behavior/functionality/visual layout/interactions.
After that update the task-prd section 4 with the list of tasks.



Implement partial graph updates/merging when text is parsed (preserve existing data)
When updating the text-panel with new graph data. Here is how I want the text updates 
to work.

1. On first initialization, just get the full text-format of the graph.
2. For any subsequent updates.
 - NODE_ADD             | Add node to the end of the text
 - NODE_LABEL_CHANGE    | Find all isntance of that node label and then rename it.
 - NODE_REMOVE          | Find all instances of that node label and the remove it. If
                         the removed node appears in an edge. Delete those edge text lines too.
 - EDGE_ADD             | Add the next edge at the end of text
 - EDGE_REMOVE          | Find the text-line with that edge and remove it from the text.
 - EDGE_WEIGHT_CHANGE   | Find the text-line with that edge and change the weight/remove it
 - GRAPH_TYPE_CHANGE    | Do nothing.
 - INDEXING_MODE_CHANGE | Regenerate the entire text from the new graph data.
 - MAX_NODES_CHANGE     | Do nothing.



Instead of using a lastOperation prop.
You should be able to generate the list of updates by using GraphUtils to compare 
the incoming graphData with the old graphData to run the changes.